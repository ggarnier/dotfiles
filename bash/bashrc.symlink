case "$(uname -s)" in
  Linux)
    # linuxbrew
    export PATH="/home/linuxbrew/.linuxbrew/bin:$PATH"

    # itau - https://hub.docker.com/r/lichti/warsaw-browser/
    alias itau="warsaw-browser itau"
    function warsaw-browser {
      xhost +"local:root"
      docker run -it --rm \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -v $HOME/ArquivosDoBanco:/home/bank/Downloads \
        -e DISPLAY=unix$DISPLAY \
        --name warsaw-browser \
        lichti/warsaw-browser $1;
    }

    function pdfjoin {
      if [ $# -lt 3 ]; then
        echo "3 or more arguments required"
        return
      fi
      outfile="\"${1}\""
      shift 1
      infiles=""
      for f in "$@"; do
        infiles=`echo -n "$infiles" "${f}"`
      done
      gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile="$outfile" $infiles
    }

    alias pbcopy='xsel --clipboard --input'
    alias pbpaste='xsel --clipboard --output'
    ;;

  Darwin)
    alias airport='/System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport'
    alias pdfjoin='/System/Library/Automator/Combine\ PDF\ Pages.action/Contents/Resources/join.py'

    # Mongodb service
    # http://www.mongodbspain.com/en/2016/02/15/how-to-launch-mongodb-while-our-mac-osx-starts/
    # https://gist.github.com/subfuzion/9630872
    sudo launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mongodb.plist
    sudo launchctl start homebrew.mxcl.mongodb.mongod
    ;;
esac

export EDITOR=nvim

# android sdk
#export ANDROID_HOME=${HOME}/Library/Android/sdk
#export PATH=${PATH}:${ANDROID_HOME}/tools
#export PATH=${PATH}:${ANDROID_HOME}/platform-tools

# bash completion
if [ -f $(brew --prefix)/etc/bash_completion ]; then
  . $(brew --prefix)/etc/bash_completion
fi

# history
export HISTCONTROL=erasedups
export HISTSIZE=99999999999999999999999999999999999999999999999
shopt -s histappend
export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"
export HISTCONTROL=ignoredups

# prompt
parse_tsuru_target() {
    tsuru target-list 2> /dev/null | grep '\*' | awk '{print $3}'
}
parse_kube_ctx() {
    kubectl config current-context 2> /dev/null | awk '{print "("$0")"}'
}
export CLICOLOR=true
export PS1="\[\033[33;1m\]\w\[\033[m\]\[\e[1;32m\]\$(__git_ps1) \[\033[m\]\n\$ "
export LS_OPTIONS="--color=auto"
eval "$(dircolors -b)"
alias ls="ls $LS_OPTIONS"
alias ll="ls -la"
alias cat="bat"
alias vi="nvim"
alias vim="nvim"

# go
export GOPATH=$HOME/dev/go
export PATH=$PATH:$GOPATH/bin

# tsuru
alias t='tsuru'
export T=$GOPATH/src/github.com/tsuru/tsuru

# kubernetes
alias k='/snap/bin/kubectl'
source <(kubectl completion bash)
alias kevt='kubectl get events --all-namespaces --sort-by='\''{.lastTimestamp}'\'''

# ripgrep
export RIPGREP_CONFIG_PATH=$HOME/.ripgreprc

# pyenv
if which pyenv > /dev/null; then
  eval "$(pyenv init -)"
  if which pyenv-virtualenv-init > /dev/null; then
    eval "$(pyenv virtualenv-init -)"
  fi
fi

# aliases
alias docker-cleanup='docker rm $(docker ps --filter "status=exited" -q); docker rmi $(docker images -f "dangling=true" -q); docker volume rm $(docker volume ls -qf dangling=true)'

# rvm
#[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*

# google cloud
# The next line updates PATH for the Google Cloud SDK.
#if [ -f "$HOME/dev/google-cloud-sdk/path.bash.inc" ]; then source "$HOME/dev/google-cloud-sdk/path.bash.inc"; fi
# The next line enables shell command completion for gcloud.
#if [ -f "$HOME/dev/google-cloud-sdk/completion.bash.inc" ]; then source "$HOME/dev/google-cloud-sdk/completion.bash.inc"; fi

[ -f ~/.fzf.bash ] && source ~/.fzf.bash
