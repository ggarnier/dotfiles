export LC_CTYPE=en_US.UTF-8
export LC_ALL=en_US.UTF-8

case "$(uname -s)" in
  Linux)
    # itau - https://hub.docker.com/r/lichti/warsaw-browser/
    alias itau="warsaw-browser itau"
    function warsaw-browser {
      xhost +"local:root"
      docker run -it --rm \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -v $HOME/ArquivosDoBanco:/home/bank/Downloads \
        -e DISPLAY=unix$DISPLAY \
        --name warsaw-browser \
        lichti/warsaw-browser $1;
    }

    function pdfjoin {
      if [ $# -lt 3 ]; then
        echo "3 or more arguments required"
        return
      fi
      outfile="\"${1}\""
      shift 1
      infiles=""
      for f in "$@"; do
        infiles=`echo -n "$infiles" "${f}"`
      done
      gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile="$outfile" $infiles
    }

    alias pbcopy='xsel --clipboard --input'
    alias pbpaste='xsel --clipboard --output'
    ;;

  Darwin)
    alias airport='/System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport'
    alias pdfjoin='/System/Library/Automator/Combine\ PDF\ Pages.action/Contents/Resources/join.py'

    # Mongodb service
    # http://www.mongodbspain.com/en/2016/02/15/how-to-launch-mongodb-while-our-mac-osx-starts/
    # https://gist.github.com/subfuzion/9630872
    sudo launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mongodb.plist
    sudo launchctl start homebrew.mxcl.mongodb.mongod
    ;;
esac

export EDITOR=nvim
export TMPDIR="/tmp"

# history
export HISTCONTROL=erasedups
export HISTSIZE=99999999999999999999999999999999999999999999999
shopt -s histappend
export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"
export HISTCONTROL=ignoredups

# prompt
parse_kube_ctx() {
    kubectl config current-context 2> /dev/null | awk '{print "("$0")"}'
}
export CLICOLOR=true

# bash-git-prompt: https://github.com/magicmonty/bash-git-prompt
if [ -f "$HOME/.bash-git-prompt/gitprompt.sh" ]; then
  GIT_PROMPT_ONLY_IN_REPO=1
  source $HOME/.bash-git-prompt/gitprompt.sh
fi

gitup() {
  CURRENT_BRANCH=`git branch | grep \* | cut -d ' ' -f2`
  if [ "$CURRENT_BRANCH" != "main" ]; then
    git checkout main && git pull origin main && GITUP_CMD="git branch -D $CURRENT_BRANCH" && echo "$GITUP_CMD" && echo "$GITUP_CMD" | pbcopy
  fi
}

export LS_OPTIONS="--color=auto"
eval "$(dircolors -b)"

alias ls="ls $LS_OPTIONS"
#alias ll="ls -la"
function ll {
  cd "$(llama "$@")"
}
alias vi="nvim"
alias vim="nvim"

# kubernetes
source <(kubectl completion bash)
alias k='kubecolor'
alias kd='kubecolor describe'
complete -F __start_kubectl k
alias kevt='kubectl get events --all-namespaces --sort-by='\''{.lastTimestamp}'\'''
function kapp {
  tmpfile=`mktemp`
  kubectl get all -l app=$@ > $tmpfile 2>&1
  if [[ `cat $tmpfile` == "No resources found." ]]; then
    kubectl get all -l name=$@
  else
    cat $tmpfile
  fi
  rm -f $tmpfile
}

alias pnx="pnpm nx"

# ripgrep
export RIPGREP_CONFIG_PATH=$HOME/.ripgreprc

# docker
alias docker-cleanup='docker rm $(docker ps --filter "status=exited" -q); docker rmi $(docker images -f "dangling=true" -q); docker volume rm $(docker volume ls -qf dangling=true)'
# dive - https://github.com/wagoodman/dive
alias dive="docker run -ti --rm  -v /var/run/docker.sock:/var/run/docker.sock wagoodman/dive"

dr() {
  docker run -it --rm -u 1000:1000 -v "$PWD":/app -w /app $@
}
imagemagick() {
  dr jess/imagemagick $@
}

# import secrets
[ -s "$HOME/.secrets" ] && . "$HOME/.secrets"

# fzf
[ -f /usr/share/doc/fzf/examples/key-bindings.bash ] && source /usr/share/doc/fzf/examples/key-bindings.bash

# asdf
export PATH="$HOME/.asdf/shims:$GOBIN:$HOME/bin:$PATH"
. <(asdf completion bash)
[ -f "$HOME/.asdf/plugins/golang/set-env.bash" ] && . ~/.asdf/plugins/golang/set-env.bash

# https://jusbrasil.slack.com/archives/C024ZJBMU/p1732907781236309
alias lgtm="curl -s 'https://us-central1-lgtm-reloaded.cloudfunctions.net/lgtm' | jq -r '.markdown' | grep -v 'Powered By GIPHY' | pbcopy && echo LGTM copied"

# Example usage of comparing output of two ls commands$ diff -u <(ls -l /directory/) <(ls -l /directory/) | colordiff

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
#export SDKMAN_DIR="/home/ggarnier/.sdkman"
#[[ -s "/home/ggarnier/.sdkman/bin/sdkman-init.sh" ]] && source "/home/ggarnier/.sdkman/bin/sdkman-init.sh"
source "/home/ggarnier/.rover/env"
